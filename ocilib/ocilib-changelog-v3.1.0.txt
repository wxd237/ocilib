2008-xx-xx Version 3.1.0 Vincent Rogier vince.rogier@gmail.com

    * Added support for Oracle REF datatype

      - Added OCI_RefCreate()
      - Added OCI_RefFree()
      - Added OCI_RefGetObject()
      - Added OCI_RefAssign()
      - Added OCI_RefIsNull()
      - Added OCI_RefSetNull()
      - Added OCI_RefToText()
      - Added OCI_RefGetHexSize()
      - Added OCI_GetRef2()
      - Added OCI_GetRef()
      - Added OCI_BindRef()
      - Added OCI_BindArrayOfRefs()
      - Added OCI_RegisterRef()
      - Added OCI_ElemGetRef()
      - Added OCI_HandleGetRef()
      - Added OCI_ObjectGetRef()
      - Added OCI_ObjectGetSelfRef()

    * Extended Bind informations

      - Modified : OCI_Bind handles are now public and can be retrieved for public information
      - Added OCI_GetBindCount()
      - Added OCI_GetBind()
      - Added OCI_GetBind2()
      - Added OCI_BindGetName()
      - Added OCI_BindGetType()
      - Added OCI_BindGetSubtype()
      - Added OCI_BindGetStatement()
      - Added OCI_BindGetData()
      - Added OCI_BindGetDataCount()
      - Added OCI_BindGetDataSize()
      - Added OCI_BindGetDataSizeAtPos()
      - Added OCI_BindSetDataSize()
      - Added OCI_BindSetDataSizeAtPos()
      - Added OCI_SetNull2()
      - Added OCI_SetNullAtPos2()
      - Extended OCIBindxxx() calls satefy : 

        * An error OCI_ERR_BIND_ALREADY_USED is now raised if the bind name or position is already binded to the statement
        * With the bind mode by position, provided bind indexes <= 0  and > OCI_BIND_MAX will cause an error OCI_ERR_OUT_OF_BOUNDS

      - Extended binds/registers limits :
 
        * OCI implements the SQL returning clause through binds operations
        * OCILIB wraps the result of the returning clause within OCI_Resultet object but has to use internal binds to create its resultset
        * Prior to v3.1.0, OCI_BIND_MAX (default 512) was the maximum of OCI_bindxxx() including OCI_Registerxxx() that an OCI_Statement could handle
        * With v3.1.0, OCILIB can handle OCI_BIND_MAX user binds handle and OCI_BIND_MAX items in the returning clause

    * Fixed Unicode support for Unixes platforms

        * Unicode support for platforms with 4 bytes wchar_t was broken
        * Fixed configure script was setting bad charset macros
        * Fixed some internal buffer expansion functions

    * Miscellaneous public modifications

      - Added OCI_IsNull2()
      - Added OCI_ResultsetGetStatement()
      - Added OCI_ObjectAssign()
      - Added OCI_ObjectGetType()
      - Added OCI_BindArrayOfColls()

      - Added functions to retrieve OCI_Schema object from various OCILIB object bases on Oracle object type :

        * Added OCI_ObjectGetSchema()
        * Added OCI_CollGetSchema()
        * Added OCI_RefGetSchema()

      - Added runtime information about OCILIB builds modes :

        * Added OCI_GetImportMode()
        * Added OCI_GetCharsetMetaData()
        * Added OCI_GetCharsetUserData()

      - Modified ocilib demo to properly support MinGw and unix based unicode console output

    * Miscellaneous internal modifications

      - Added internal reference counter to OCI_Schema object 

        * Some OCILIB objects keep a pointer to a some OCI_schema objects
        * If OCI_SchemaFree() was called, these objects were holding a reference to a freed block of memory and then accessing this reference could cause a segfault
        * Now OCI_SchemaFree() only frees an schema object if its reference counter is zero.
       
    * Miscellaneous fixes

      - OCI_IsConnected() was always returning FALSE since v3.0.0
      - OCI_SchemaGet() with OCI_SCHEMA_TABLE was causing an ORA-24328 with Oracle 8 and 9 (working fine with Oracle 10) since v3.0.0
      - Fixed demo file output.c
      - Fixed some preprocessor directives in oci_loader.h
      - OCI_Fetchxxx() functions could return TRUE even if the given SQL statement had some SQL conversion function that failed (like to_date(), etc..)
      - OCI_Getxxx() functions could cause a segfault called before any OCI_Fetchxxx() calls 
      - Fixed OCI_Object reusability: internal sub object could not be freed when fetching next object and thus lead to memory leaks
      - Since v3.0.0, fetching LONG column with OCI_LONG_IMPLICIT mode was truncating data to its half length in Unicode and Mixed Builds 
      - Fixed some prepocessor directives for MinGw support
